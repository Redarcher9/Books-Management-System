definitions:
  domain.Book:
    properties:
      author:
        maxLength: 255
        type: string
      id:
        example: 1
        type: integer
      title:
        maxLength: 255
        type: string
      year:
        example: 1957
        type: integer
    required:
    - author
    - title
    - year
    type: object
  domain.BookRequest:
    properties:
      author:
        maxLength: 255
        type: string
      title:
        maxLength: 255
        type: string
      year:
        example: 1957
        type: integer
    required:
    - author
    - title
    - year
    type: object
info:
  contact: {}
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve all books with pagination. If the provided offset or limit
        is less than 0, default values of limit = 10 and offset = 0 will be applied
        automatically.
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Book'
              type: array
            type: array
        "500":
          description: Internal Server Error
      summary: Get all books with pagination
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with title, author, and year
      parameters:
      - description: Book data to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Book Created Successfully
        "400":
          description: Validation Error
        "409":
          description: Book with provided Title and Author already exists
        "500":
          description: Internal Server Error
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Book Deleted Successfully
        "500":
          description: Internal Server Error
      summary: Delete a book by ID
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Fetch detailed information about a book using its unique ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Invalid ID format
        "404":
          description: Book not found
        "500":
          description: Internal Server Error
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book by its ID with the provided data
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated successfully
        "400":
          description: Validation Error
        "404":
          description: Book to update not found
        "500":
          description: Internal Server Error
      summary: Update a book by ID
      tags:
      - books
  /helloworld:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
swagger: "2.0"
